// Copyright 2006 ESRI
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// You may freely redistribute and use this sample code, with or
// without modification, provided you include the original copyright
// notice and use restrictions.
//
// See use restrictions at /arcgis/developerkit/userestrictions.
using ESRI.ArcGIS.esriSystem;

//FILE AUTOMATICALLY GENERATED BY ESRI LICENSE INITIALIZATION ADDIN
//YOU SHOULD NOT NORMALLY EDIT OR REMOVE THIS FILE FROM THE PROJECT

namespace DataHelper
{
    public sealed class LicenseInitializer
    {
        private IAoInitialize m_AoInitialize = new AoInitialize();

        //Requested products and extensions
        private esriLicenseProductCode[] m_productsCode;
        private esriLicenseExtensionCode[] m_pExtensionsCode;

        //Product and extensions that have been successfully checked out
        private esriLicenseProductCode m_initProduct;
        private esriLicenseExtensionCode[] m_initExts = null;

        public bool InitializeApplication(esriLicenseProductCode[] productCodes, esriLicenseExtensionCode[] extensionLics)
        {
            bool bInitialized = true;

            if (m_AoInitialize == null)
            {
                System.Console.WriteLine("Unable to initialize ArcGIS. This application cannot run! Please check that ArcGIS (Desktop, Engine or Server) is installed.", "ESRI License Initializer");
                //// // LogHelper.LogHelper.("InitializeApplication±¨´í:Unable to initialize ArcGIS. This application cannot run! Please check that ArcGIS (Desktop, Engine or Server) is installed.");
                bInitialized = false;
            }

            //Initialize the application
            esriLicenseStatus licenseStatus = esriLicenseStatus.esriLicenseUnavailable;

            m_productsCode = productCodes;
            m_pExtensionsCode = extensionLics;

            licenseStatus = CheckOutLicenses();
            if (licenseStatus != esriLicenseStatus.esriLicenseCheckedOut)
            {
                System.Console.WriteLine(LicenseMessage(licenseStatus), "ESRI License Initializer");
                bInitialized = false;
            }

            return bInitialized;
        }

        public void ShutdownApplication()
        {
            if (m_AoInitialize == null) return;

            //Checkin the extensions
            if (m_initExts != null)
            {
                foreach (esriLicenseExtensionCode extLicense in m_initExts)
                {
                    if (m_AoInitialize.CheckInExtension(extLicense) != esriLicenseStatus.esriLicenseCheckedIn)
                    {
                        //Silent check in error
                        //System.Diagnostic.Trace.WriteLine(LicenseMessage(licenseStatus), "ESRI License Initializer")
                    }
                }
            }

            //Shut down the AoInitialize object
            m_AoInitialize.Shutdown();
            m_AoInitialize = null;
        }

        #region "Private helper functions"
        private esriLicenseStatus CheckOutLicenses()
        {
            esriLicenseStatus licenseStatus = esriLicenseStatus.esriLicenseNotInitialized;

            //Determine if the product is available
            for (int i = 0; i < m_productsCode.Length; i++)
            {
                esriLicenseProductCode pc = m_productsCode[i];
                licenseStatus = m_AoInitialize.IsProductCodeAvailable(pc);
                if (licenseStatus == esriLicenseStatus.esriLicenseAvailable)
                {
                    licenseStatus = m_AoInitialize.Initialize(pc);
                    if (licenseStatus == esriLicenseStatus.esriLicenseCheckedOut)
                    {
                        m_initProduct = pc;
                        break;
                    }
                }
            }

            if (m_pExtensionsCode != null)
            {
                //Checkout the extensions - only when product is initialized
                if (licenseStatus == esriLicenseStatus.esriLicenseCheckedOut)
                {
                    System.Collections.ArrayList initExts = new System.Collections.ArrayList(m_pExtensionsCode.Length);
                    foreach (esriLicenseExtensionCode extLicense in m_pExtensionsCode)
                    {
                        //Determine if the extensions are available - some may not be available depending on the product initialized
                        //If so, initialization fails...
                        licenseStatus = m_AoInitialize.IsExtensionCodeAvailable(m_initProduct, extLicense);
                        if (licenseStatus == esriLicenseStatus.esriLicenseAvailable)
                        {
                            licenseStatus = m_AoInitialize.CheckOutExtension(extLicense);
                            if (licenseStatus != esriLicenseStatus.esriLicenseCheckedOut && licenseStatus != esriLicenseStatus.esriLicenseAlreadyInitialized)
                                break;

                            //Add to license initialized list
                            initExts.Add(extLicense);
                        }
                        else
                            break;	//Exit when failed to check out any extension
                    }
                    if (initExts.Count > 0)
                    {
                        m_initExts = new esriLicenseExtensionCode[initExts.Count];
                        m_initExts = (esriLicenseExtensionCode[])initExts.ToArray(typeof(esriLicenseExtensionCode));
                    }
                }
            }
            return licenseStatus;
        }

        private string LicenseMessage(esriLicenseStatus licenseStatus)
        {
            string message = "";

            //Not licensed
            if (licenseStatus == esriLicenseStatus.esriLicenseNotLicensed)
            {
                message = "You are not licensed to run this product!";
            }
            //The licenses needed are currently in use
            else if (licenseStatus == esriLicenseStatus.esriLicenseUnavailable)
            {
                message = "There are insuffient licenses to run!";
            }
            //The licenses unexpected license failure
            else if (licenseStatus == esriLicenseStatus.esriLicenseFailure)
            {
                message = "Unexpected license failure! Please contact your administrator.";
            }
            //Already initialized (Initialization can only occur once)
            else if (licenseStatus == esriLicenseStatus.esriLicenseAlreadyInitialized)
            {
                message = "The license has already been initialized! Please check your implementation.";
            }
            return message;
        }
        #endregion
    }
}
